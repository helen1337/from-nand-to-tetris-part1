// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/5/CPU.hdl
/**
 * The Hack Central Processing unit (CPU).
 * Parses the binary code in the instruction input and executes it according to the
 * Hack machine language specification. In the case of a C-instruction, computes the
 * function specified by the instruction. If the instruction specifies to read a memory
 * value, the inM input is expected to contain this value. If the instruction specifies
 * to write a value to the memory, sets the outM output to this value, sets the addressM
 * output to the target address, and asserts the writeM output (when writeM = 0, any
 * value may appear in outM).
 * If the reset input is 0, computes the address of the next instruction and sets the
 * pc output to that value. If the reset input is 1, sets pc to 0.
 * Note: The outM and writeM outputs are combinational: they are affected by the
 * instruction's execution during the current cycle. The addressM and pc outputs are
 * clocked: although they are affected by the instruction's execution, they commit to
 * their new values only in the next cycle.
 */
CHIP CPU {

    IN  inM[16],         // M value input  (M = contents of RAM[A])
        instruction[16], // Instruction for execution
        reset;           // Signals whether to re-start the current
                         // program (reset==1) or continue executing
                         // the current program (reset==0).

    OUT outM[16],        // M value output
        writeM,          // Write to M? 
        addressM[15],    // Address in data memory (of M)
        pc[15];          // address of next instruction

    PARTS:
    // load value for A reg from instruction if its A-instr, otherwise load out of ALU
    Mux16(a=instruction,b=outALU,sel=instruction[15],out=outMuxbeforeAReg);

    // bit for access to load in A reg: if its A-instr or dest-bit for A-reg is 1
    Not(in=instruction[15],out=Ainstr);
    Or(a=instruction[5],b=Ainstr,out=loadAReg);
    ARegister(in=outMuxbeforeAReg,load=loadAReg,out=AReg,out[0..14]=addressM);
    
    // choice between A and M (12 bits in instr)
    Mux16(a=AReg,b=inM,sel=instruction[12],out=aminALU);
    
    // write value in D reg if its C instr
    And(a=instruction[15],b=instruction[4],out=loadD);
    DRegister(in=outALU,load=loadD,out=DReg);

    // write M if its C-instr and dest-bit for M is 1
    And(a=instruction[15],b=instruction[3],out=writeM);

    // ez set ALU
    ALU(x=DReg,y=aminALU,zx=instruction[11],nx=instruction[10],
    zy=instruction[9],ny=instruction[8],f=instruction[7],no=instruction[6],
    out=outM,out=outALU,zr=zr,ng=ng);

    /*
    * set sel={zr,ng}
    * then: if (sel==oo) load=j3
    *       else if (sel==01) load=j1
    *       else if (sel==10) load=j2
    *       else if (sel==11) load=j1 and j2 and j3
    **/
    And(a=instruction[0],b=instruction[1],out=j23);
    And(a=j23,b=instruction[2],out=j123);

    Mux(a=instruction[0],b=instruction[2],sel=ng,out=j13);
    Mux(a=instruction[1],b=j123,sel=ng,out=j123and2);
    Mux(a=j13,b=j123and2,sel=zr,out=loadj);

    // set load only if its C instr
    And(a=loadj,b=instruction[15],out=load);

    PC(in=AReg,load=load,inc=true,reset=reset,out[0..14]=pc);
}